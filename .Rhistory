install.packages("tidyverse")
yes
i
y
Yes
install.packages("tidyverse")
install.packages("jsonlite")
setwd("~/Documents/R_Files")
> numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?<c()>
?<c>
?c
?read.csv()
demo_table <- read.csv(file = "demo.csv", check.names-F, stringsAsFactors = F)
demo_table <- read.csv(file = "01_Demo/demo.csv", check.names-F, stringsAsFactors = F)
demo_table <- read.csv(file = "01_Demo/demo.csv", check.names = F, stringsAsFactors = F)
View(demo_table)
library(jsonlite)
?fromJSON
demo_table2 <- fromJSON(txt = "01_Demo/demo.json")
View(demo_table2)
demo_table2$city
demo_table2$"city"
> filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
filter_table2 <- demo_table2$price > 10000
?subset()
subset_table  <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
View(subset_table)
?sample()
library(tidyverse)
?mutate
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
?group_by
?gather
demo_table3 <- read.csv('01_Demo/demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
View(demo_table3)
View(long_table)
View(demo_table3)
View(long_table)
View(demo_table3)
View(long_table)
?spread()
wide_table <- long_Table %>% spread(key = "Metric", value = "Score")
wide_table <- long_table %>% spread(key = "Metric", value = "Score")
View(wide_table)
?ggplot
head(mpg)
plt <- ggplot(mpg,aes(x = class))
plt + geom_bar()
?geom_bar
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count = n(), .groups="keep")
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count))
plt +geom_col()
View(mpg_summary)
plt +geom_col() + xlab("Manufacturer") + ylab("Number of Vehicles")
plt +geom_col() + xlab("Manufacturer") + ylab("Number of Vehicles") + theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary2 <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups="keep")
View(mpg_summary2)
plt2 <- ggplot(mpg_summary2, aes(x=cyl,y=Mean_Hwy))
plt2 + geom_line()
plt2 + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks=c(15:30))
#scatter plots
plt3 <- ggplot(mpg,aes(x=displ,y=cty))
plt3 + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency")
plt3 + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency", color="Vehicle Class")
plt3 <- ggplot(mpg,aes(x=displ,y=cty, color=class))
plt3 + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency", color="Vehicle Class")
# Box and whisker plot
plt4 <- ggplot(mpg,aes(y=hwy))
plt4 + geom_boxplot()
plt4 <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt4 + geom_boxplot() + theme(axis.text.x=element_text(angle=45, hjust=1))
# Heat Maps
mpg_summary3 <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups="keep")
plt5 <- ggplot(mpg_summary3, aes(x=class, y=factor(year), fill=Mean_Hwy))
plt5 + geom_tile() + labs(x="Vehicle Class", y="Vehicle Year", fill="Mean Highway (MPG)")
View(mpg_summary3)
View(mpg_summary2)
View(mpg_summary)
View(demo_table)
View(mpg_summary)
View(demo_table3)
View(demo_table3)
View(demo_table2)
View(demo_table3)
View(mpg)
View(plt4)
plt4 + geom_boxplot()
plt4 + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt4 + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) + geom_point()
mpg_summary4 <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), SD_Engine=sd(displ), .groups="keep")
plt6 <- ggplot(mpg_summary4,  aes(x=class, y=Mean_Engine))
plt6 + geom_point(size=4) + labs(x="Vehicale Class", y="Mean Engine Size") + geom_errorbar(aes(ymin=Mean_Engine-SD_Engine, ymax=Mean_Engine+SD_Engine))
# Faceting
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
View(mpg_long)
plt7 <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt7 + geom_boxplot() + theme(axis.text.x = element_text(angle=45, hjust=1))
?facet_wrap
plt7 + geom_boxplot() + facet_wrap(vars(MPG_Type)) + theme(axis.text.x = element_text(angle=45, hjust=1),legend.position="none") + xlab("Manufacturer")
ggplot(mtcars,aes(x-wt)) + geom_density()
ggplot(mtcars,aes(x=wt)) + geom_density()
View(mtcars)
?shapiro.test
shapiro.test(mtcars$wt)
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
# A vector is a basic unit of data structure in R
# All elements in a vector must be of the same type
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
print(disney_characters)
print(presidents)
print(numbers_vector)
# R is a one-index language!
presidents[1]
library(knitr)
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
print(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah","Eric","Felicia")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (name in class)
{print(name)}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in class){
print(name)
sample(33,3)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in class){
print(name)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
letter <- student[2]
print(letter)
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
?substring
print(letter)
print(locker)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (name in class){
print(name)
locker <- sample(33,3)
print(locker)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substr(student,2,2)
print(letter)
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substr(student,2,2)
print(student)
print(letter)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (letter == "e"){
locker <- sample(33:66,3)
print(student)
print(locker)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
?data
count(diamonds, cut)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
?knitr
students <-read_csv("students.csv")
students <-read_csv("../Resources/students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
unique(students,school_name)
# unique(dataset, variable) displays unique elements from that column
unique(students, "school_name")
?unique
# unique(dataset, variable) displays unique elements from that column
unique(students$school_name)
# Use length() to identify the number of schools
unique(students$school_name) %>% length
# Use length() to identify the number of schools
school_count <- unique(students$school_name) %>% length
# Use length() to identify the number of schools
school_count <- unique(students$school_name) %>% length
print(school_count)
# nrow() returns the number of rows
student_count <- nrow(students)
paste("There are a total of", student_count, "students.")
?summarise
mean_reading_score <- mean(students$reading_score)
paste("The average reading score is", mean_reading_score)
mean_math_score <- mean(students$math_score)
paste("The average math score is", mean_math_score)
passing_math <- students %>% filter(math_score >=70) %>% nrow
total_count <- students %>% nrow
percent_passing_math <- (passing_math/total_count*100) %>% round(2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
passing_math <- students %>% filter(math_score >=70) %>% nrow
total_count <- students %>% nrow
percent_passing_math <- (passing_math/total_count*100) %>% round(2)
paste(percentage_passing_math, "% of the students have passing reading scores.")
passing_math <- students %>% filter(math_score >=70) %>% nrow
total_count <- students %>% nrow
percent_passing_math <- (passing_math/total_count*100) %>% round(2)
paste(percentage_passing_math, "% of the students have passing reading scores.")
passing_math <- students %>% filter(math_score >=70) %>% nrow
total_count <- students %>% nrow
percent_passing_math <- (passing_math/total_count*100) %>% round(2)
paste(percent_passing_math, "% of the students have passing reading scores.")
?sample_n
### MODULE 15.6 EXERCISES
population_table <- read.csv("01_Demo/used_car_data.csv", check,names=F, stringsAsFactors = F)
population_table <- read.csv("01_Demo/used_car_data.csv", check.names=F, stringsAsFactors = F)
plt8 <- ggplot(population_table, aes(x=log10(Miles_Driven)))
plt8 + geom_density()
sample_table <- population_table %>% sample_n(50)
plt9 <- ggplot(sample_table, aes(x=log10(Miles_Driven)))
plt9 + geom_density()
View(sample_table)
plt9 + geom_density()
plt8 + geom_density()
?slice_sample
sample_table2 <- slice_sample(population_table, n=50)
plt10 <- ggplot(sample_table2, aes(x=log10(Miles_Driven)))
plt10 + geom_density()
plt9 + geom_density()
plt8 + geom_density()
?t.test
t.test(log10(sample_table$Miles_Driven), mu=mean(log10(population_table$Miles_Driven)))
t.test(log10(sample_table2$Miles_Driven), mu=mean(log10(population_table$Miles_Driven)))
t.test(log10(sample_table2$Miles_Driven), mu=mean(log10(sample_table2$Miles_Driven)))
t.test(log10(sample_table$Miles_Driven), mu=mean(log10(sample_table2$Miles_Driven)))
t.test(log10(sample_table$Miles_Driven), log10(sample_table2$Miles_Driven))
mpg_data <- read.csv("mpg_modified.csv")
mpg_data <- read.csv("01_Demo/mpg_modified.csv")
mpg_1999 <- mpg_data %>% filter(year==1999)
mpg_2008 <- mpg_data %>% filter(year==2008)
t.test(mpg_1999$hwy,mpg_2008$hwy, paired=T)
?aov
# All variables must be in same data frame for anova
mtcars_filt <- mtcars[,c("hp", "cyl")]
mtcars_filt$cyl <- factor(mtcars_filt$cyl) # convert numeric values to categorical(factors)
aov(hp~cyl, data=mtcars_filt)
summary(aov(hp~cyl, data=mtcars_filt))
?cor
View(mtcars)
plt11 <- ggplot(mtcars, aes(x=hp, y=sec))
plt11 + geom_point()
plt11 <- ggplot(mtcars, aes(x=hp, y=qsec))
plt11 + geom_point()
cor(mtcars$hp, mtcars$qsec)
used_cars <- read.csv("01_Demo/used_car_data.csv", stringsAsFactors = F)
View(used_cars)
plt12 <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_Price))
plt12 + geom_point()
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
used_matrix <- as.matrix(used_cars[,c("Selling_Price", "Present_Price", Miles_Driven)])
used_matrix <- as.matrix(used_cars[,c("Selling_Price", "Present_Price", "Miles_Driven")])
View
View(used_matrix)
cor(used_matrix)
?lm
# linear Regression Model
lm(qsec~hp,mtcars)
summary(lm(qsec~hp,mtcars))
model <- lm(qsec~hp,mtcars) # create linear regress model
yvals <- model$coefficients["hp"]*mtcars$hp + model$coefficients["(Intercept)"]
plt13 <- ggplot(mtcars, aes(x=hp,y=qsec))
plt13 +geom_point() + geom_line(aes(y=yvals), color="red")
lm(qsec~mpg + disp + drat + wt + hp, data=mtcars)
summary(lm(qsec~mpg + disp + drat + wt + hp, data=mtcars))
summary(lm(qsec~wt + hp, data=mtcars))
#### MODULE 15.8
?chisq.test
# Make contingency (frequency) table
table(mpg$class,mpg$year)
class_year_table <- table(mpg$class,mpg$year)
chisq.test(class_year_table)
###  Module 15.9 AB testing
?set.seed
?rnorm
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Documents/Courses Workshops Learning/UC Berkeley Data Science/Unit 5 Advanced Topics/Module 15/Class Activities/Class15.2/03-Stu_Sardines/Unsolved")
sardines <- read.csv(file="../Resources/sardines.csv")
View(sardines)
?t.test
?subset
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
Alaska <- subset(sardines, location == "1", drop = False)
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
Alaska <- subset(sardines, location == "1")
View(Alaska)
San_Diego <- subset(sardines, location == "2")
?t.test
# Calculate Independent (Two Sample) T-Test
t.test(Alaska, San_Diego, "two.sided")
# Calculate the population mean for Sardine Vertebrae in San Diego.
# Hint: use the subset() function to get only the data for San Diego.
mean(Alaska$vertebrae)
mean(San_Diego$vertebrae)
t.test(Alaska$vertebrae, San_Diego$vertebrae, "two.sided")
setwd("~/Documents/Courses Workshops Learning/UC Berkeley Data Science/Unit 5 Advanced Topics/Module 15/Class Activities/Class15.2/05-Stu_ANOVA/Unsolved")
View(sardines)
SD2 <- subset(sardines, location =="6")
View(SD2)
?unique
Locations <- unique(sardines$location)
# Read in the CSV file.
hair <- read.csv(file="../Resources/hair.csv")
View(hair)
#  Plot the data using ggplot
hairplot <- ggplot(hair, aes(x=HairColour, y=Pain))
hairplot + geom_boxplot()
# Determine the p-value using ANOVA
aov(HairColour ~ factor(Pain), data=hair)
# Determine the p-value using ANOVA
aov(HairColour ~ Pain, data=hair)
# Determine the p-value using ANOVA
aov(HairColour ~ Pain, data=hair)
# Determine the p-value using ANOVA
summary(aov(Pain ~ HairColour, data=hair))
setwd("~/Documents/Courses Workshops Learning/UC Berkeley Data Science/Unit 5 Advanced Topics/Module 15/Class Activities/Class15.2/06-Evr_Fits_and_Regression/Unsolved")
# Read in the diabetes.csv file.
diabetes <- read.csv(file="../Resources/diabetes.csv")
View(diabetes)
# Plot a scatter plot of bp vs. one year disease progression
ggplot(diabetes, aes(bp, One_Year_Disease_Progress)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Perform linear regression
reg <- lm(One_Year_Disease_Progress ~ bp, data=diabetes)
summary(reg)
# Get the r-sqaured value.
summary(reg)$r.squared
setwd("~/Documents/Courses Workshops Learning/UC Berkeley Data Science/Unit 5 Advanced Topics/Module 15/Challenge 15")
library(dplyr)
library(tidyverse)
# Import data file
MC_mpg <- read.csv("MechaCar.csv")
# Import data file
MC_mpg <- read.csv("MechaCar_mpg.csv")
View(MC_mpg)
?lm
# Linear Regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MC_mpg)
# Summary of linear regression analysis
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MC_mpg))
# Deliverable 2
# Import data file
Suspension <- read.csv("Suspension_Coil.csv")
View(Suspension)
?summarize
# Total Summary
Susp_Total_Summary <- summarize(Suspension$PSI)
# Total Summary
total_summary <- Suspension %>% summarise()
View(total_summary)
View(total_summary)
# Total Summary
total_summary <- Suspension$PSI %>% summarise()
# Total Summary
total_summary <- Suspension %>% summarize(PSI = n(), .groups = "keep")
View(total_summary)
View(students)
View(mpg_summary2)
# Total Summary
total_summary <- Suspension %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD=sd(PSI) .groups = "keep")
# Total Summary
total_summary <- Suspension %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD=sd(PSI), .groups = "keep")
View(total_summary)
View(Suspension)
# Lot Summary
lot_summary <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD=sd(PSI), .groups = "keep")
View(lot_summary)
# Deliverable 3
# Create subsets for each lot
lot1 <- subset(Suspension, Manufacturing_Lot == "1")
View(lot1)
# Deliverable 3
# Create subsets for each lot
lot1 <- subset(Suspension, Manufacturing_Lot == "Lot1")
View(lot1)
lot2 <- subset(Suspension, Manufacturing_Lot == "Lot2")
lot3 <- subset(Suspension, Manufacturing_Lot == "Lot3")
# T Tests of each lot to total population
t.test(lot1$PSI, mu=mean(Suspension$PSI))
t.test(lot2$PSI, mu=mean(Suspension$PSI))
t.test(lot3$PSI, mu=mean(Suspension$PSI))
View(population_table)
setwd("~/Documents/Courses Workshops Learning/UC Berkeley Data Science/Unit 5 Advanced Topics/Module 15/MechaCar_Statistical_Analysis")
# Importing libraries and packages
library(dplyr)
# Deliverable 1
# Import data file
MC_mpg <- read.csv("Resources/MechaCar_mpg.csv")
# Deliverable 2
# Import data file
Suspension <- read.csv("Resources/Suspension_Coil.csv")
View(plt9)
View(MC_mpg)
